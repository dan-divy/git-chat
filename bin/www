#!/usr/bin/env node
console.log('\033c')
// Modules
const app = require('../src/server');
const http = require('http');
const config = require('../package.json');
// Msg
process.stdout.write(config.name + '-v' + config.version + ': Starting...');
// Port init
const port = normalizePort(process.env.PORT || config.port);
app.set('port', port);
//Start server
const server = http.createServer(app);
//Listening
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
//Make port a number
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

//Event listeners
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  process.stdout.clearLine(); 
  process.stdout.cursorTo(0); process.stdout.write(config.name + '-v' + config.version + ': Listening on port ' + addr.port + '\n');
  if(process.argv.find(x => x == 'test')) process.exit(0);
}

//Error catching
process.on('uncaughtException', (err) => {
  console.error(`${err.name} error: ${err.stack}`);
});

process.on('unhandledRejection', (err) => {
  console.error(`${err.name} error: ${err.stack}`);
});
